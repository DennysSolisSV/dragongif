{"version":3,"sources":["assets/twitter-logo.svg","assets/logo.png","App.js","index.js"],"names":["SystemProgram","web3","anchor","Keypair","require","arr","Object","values","kp","_keypair","secretKey","secret","Uint8Array","baseAccount","fromSecretKey","programID","PublicKey","idl","metadata","address","network","clusterApiUrl","opts","amount","BN","TWITTER_HANDLE","TWITTER_LINK","App","useState","walletAddress","setWalletAddress","inputValue","setInputValue","gifList","setGifList","checkIfWalletIsConnected","a","window","solana","isPhantom","console","log","connect","onlyIfTrusted","response","publicKey","toString","alert","error","connectWallet","sendGif","length","provider","getProvider","program","Program","rpc","addGif","accounts","getGifList","resetInputField","onInputChange","event","value","target","clickGifId","likeUp","clickSendMoney","sendMoney","gifId","destPublicKeyStr","destPubKey","senderPubKey","sendSol","from","to","systemProgram","programId","connection","Connection","Provider","useEffect","addEventListener","createGifAccount","startStuffOff","user","wallet","signers","account","fetch","className","alt","src","dragonLogo","onClick","type","placeholder","onChange","map","item","index","gifLink","userAddress","upVote","twitterLogo","href","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7bdeda99.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/twitter-logo.d89d9a86.svg\";","export default __webpack_public_path__ + \"static/media/logo.ed71ac55.png\";","import { useEffect, useState } from 'react';\nimport twitterLogo from './assets/twitter-logo.svg';\nimport dragonLogo from './assets/logo.png';\nimport './App.css';\nimport { Connection, PublicKey, clusterApiUrl, Transaction} from '@solana/web3.js';\n\nimport {\n  Program, Provider, web3,\n} from '@project-serum/anchor';\n\nimport idl from './idl.json';\nimport kp from './keypair.json'\n\n// SystemProgram is a reference to the Solana runtime!\nconst { SystemProgram, Keypair } = web3;\nconst anchor = require('@project-serum/anchor');\n// Create a keypair for the account that will hold the GIF data.\nconst arr = Object.values(kp._keypair.secretKey)\nconst secret = new Uint8Array(arr)\nconst baseAccount = web3.Keypair.fromSecretKey(secret)\n\n// Get our program's id form the IDL file.\nconst programID = new PublicKey(idl.metadata.address);\n\n// Set our network to devent.\nconst network = clusterApiUrl('devnet');\n\n// Control's how we want to acknowledge when a trasnaction is \"done\".\nconst opts = {\n  preflightCommitment: \"processed\"\n}\n\nconst amount = new anchor.BN(25 * 10 ** 6)\n\n\n// Constants\nconst TWITTER_HANDLE = 'D3nnsS0l1s';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\nconst App = () => {\n\n  // State\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [inputValue, setInputValue] = useState('');\n  const [gifList, setGifList] = useState([]);\n  \n\n  // Check if wallet is connected.\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const {solana} = window;\n\n      if (solana){\n        if (solana.isPhantom){\n          console.log(\"Phantom wallet found!\");\n\n          const response = await solana.connect({ onlyIfTrusted: true });\n          console.log(\n            'Connected with Public Key:',\n            response.publicKey.toString() \n          );\n\n          setWalletAddress(response.publicKey.toString());\n        }\n      } else {\n        alert(\"Solana object not found! Get a Phantom wallet\");\n      }\n    } catch(error){\n      console.error(error);\n    }\n  };\n\n  const connectWallet = async () => {\n    const { solana } = window;\n  \n    if (solana) {\n      const response = await solana.connect();\n      console.log('Connected with Public Key:', response.publicKey.toString());\n      setWalletAddress(response.publicKey.toString());\n    }\n  };\n\n  // send the link to the blockchain\n  const sendGif = async () => {\n    if (inputValue.length === 0) {\n      console.log(\"No gif link given!\")\n      return\n    }\n    console.log('Gif link:', inputValue);\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n  \n      await program.rpc.addGif(inputValue, {\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n        },\n      });\n      console.log(\"GIF sucesfully sent to program\", inputValue)\n  \n      await getGifList();\n    } catch (error) {\n      console.log(\"Error sending GIF:\", error)\n    }\n    resetInputField();\n    \n  };\n\n  const onInputChange = (event) => {\n    const { value } = event.target;\n    setInputValue(value);\n  };\n\n  // Reset Input Field handler\n  const resetInputField = () => {\n    setInputValue(\"\");\n  };\n\n  const clickGifId = (event) => {\n    const { value } = event.target;    \n    likeUp(value);   \n  };\n\n  const clickSendMoney = (event) => {\n    const { value } = event.target;\n    sendMoney(value);  \n  };\n\n\n  const likeUp = async (gifId) => {\n    \n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      await program.rpc.likeUp(gifId, {\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n        },\n      });\n      console.log(\"GIF sucesfully sent like\", gifId)\n  \n      await getGifList();\n    } catch (error) {\n      console.log(\"Error sending GIF:\", error)\n    }\n    \n  };\n\n  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n  const sendMoney = async (destPublicKeyStr) => {\n    console.log(destPublicKeyStr)\n    \n    try {\n      const destPubKey = new PublicKey(destPublicKeyStr);\n      const senderPubKey = new PublicKey(walletAddress);\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      await program.rpc.sendSol(amount, {\n        accounts: {\n          from: senderPubKey,\n          to:destPubKey,\n          systemProgram: SystemProgram.programId,\n        },\n      });\n      \n      console.log(\"sent money\")\n  \n      await getGifList();\n    } catch (error) {\n      console.log(\"Error sending Money:\", error)\n    }\n    \n  };\n\n  // const sendMoney = async (destPubkeyStr, lamports) => {\n  //   try {\n  //     const connection = new Connection(network, opts.preflightCommitment);\n  //     console.log(\"starting sendMoney\");\n  //     const destPubkey = new PublicKey(destPubkeyStr);\n  //     const senderPubKey = new PublicKey(walletAddress);\n  //     const walletAccountInfo = await connection.getAccountInfo(\n  //       senderPubKey\n  //     );\n  //     console.log(\"wallet data size\", walletAccountInfo?.data.length);\n  \n  //     const receiverAccountInfo = await connection.getAccountInfo(destPubkey);\n  //     console.log(\"receiver data size\", receiverAccountInfo?.data.length);\n  \n  //     const instruction = SystemProgram.transfer({\n  //       fromPubkey: senderPubKey,\n  //       toPubkey: destPubkey,\n  //       lamports, // about half a SOL\n  //     });\n  //     let trans = await setWalletTransaction(senderPubKey, connection, instruction);\n  \n  //     let signature = await signAndSendTransaction(senderPubKey, connection, trans);\n  //     let result = await connection.confirmTransaction(signature, \"singleGossip\");\n  //     console.log(\"money sent\", result);\n  //   } catch (e) {\n  //     console.warn(\"Failed\", e);\n  //   }\n  // }\n\n  // const setWalletTransaction = async (senderPubKey, connection, instruction) => {\n  //   const transaction = new Transaction();\n  //   transaction.add(instruction);\n  //   transaction.feePayer = senderPubKey;\n  //   let hash = await connection.getRecentBlockhash();\n  //   console.log(\"blockhash\", hash);\n  //   transaction.recentBlockhash = hash.blockhash;\n  //   return transaction;\n  // }\n  \n  // const signAndSendTransaction = async  (senderPubKey, connection, transaction ) => {\n  //   let signedTrans = await senderPubKey.signTransaction(transaction);\n  //   console.log(\"sign transaction\");\n  //   let signature = await connection.sendRawTransaction(signedTrans.serialize());\n  //   console.log(\"send raw transaction\");\n  //   return signature;\n  // }\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n \n\n  \n\n  const getProvider = () => {\n    const connection = new Connection(network, opts.preflightCommitment);\n    const provider = new Provider(\n      connection, window.solana, opts.preflightCommitment,\n    );\n    return provider;\n  }\n\n  const renderNotConnectedContainer = () => (\n    <button\n    className=\"cta-button connect-wallet-button\"\n    onClick= {connectWallet}\n    >\n      Connect to Wallet\n    </button>\n  );\n\n  const renderConnectedContainer = () => {\n    // If we hit this, it means the program account hasn't be initialized.\n    if (gifList === null) {\n      return (\n        <div className=\"connected-container\">\n          <button className=\"cta-button submit-gif-button\" onClick={createGifAccount}>\n            Do One-Time Initialization For GIF Program Account\n          </button>\n        </div>\n      )\n    } \n    // Otherwise, we're good! Account exists. User can submit GIFs.\n    else {\n      return(\n        <div className=\"connected-container\">\n          <input className=\"inp\"\n            type=\"text\"\n            placeholder=\"Enter gif link!\"\n            value={inputValue}\n            onChange={onInputChange}\n          />\n          <button className=\"cta-button submit-gif-button\" onClick={sendGif}>\n            Submit\n          </button>\n          <div className=\"gif-grid\">\n            {/* We use index as the key instead, also, the src is now item.gifLink */}\n            {gifList.map((item, index) => (\n              <div className=\"gif-item\" key={index}>\n                <img src={item.gifLink} />\n                <p> Sender: {item.userAddress.toString()}</p>\n                <div>\n                  <button className=\"cta-button submit-like-button\" value={item.gifId.toString()} onClick={clickGifId}>\n                    Like  ({item.upVote.toString()})  \n                  </button>\n                  <button className=\"cta-button submit-money-button\" value={item.userAddress.toString()} onClick={clickSendMoney}>\n                    Tip 0.025 Solana \n                  </button>\n                </div>\n                  \n              </div>\n            ))}\n          </div>\n        </div>\n      )\n    }\n  }\n\n\n  useEffect (() => {\n    window.addEventListener('load', async (event) => {\n      await checkIfWalletIsConnected();\n    });\n  }, []);\n\n  const createGifAccount = async () => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      await program.rpc.startStuffOff({\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n          systemProgram: SystemProgram.programId,\n        },\n        signers: [baseAccount]\n      });\n      console.log(\"Created a new BaseAccount w/ address:\", baseAccount.publicKey.toString())\n      await getGifList();\n  \n    } catch(error) {\n      console.log(\"Error creating BaseAccount account:\", error)\n    }\n  }\n\n  const getGifList = async() => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      const account = await program.account.baseAccount.fetch(baseAccount.publicKey);\n      \n      console.log(\"Got the account\", account)\n      setGifList(account.gifList)\n  \n    } catch (error) {\n      console.log(\"Error in getGifs: \", error)\n      setGifList(null);\n    }\n  }\n  \n  useEffect(() => {\n    if (walletAddress) {\n      console.log('Fetching GIF list...');\n      getGifList()\n    }\n  }, [walletAddress]);\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"header-container\">\n          <p className=\"header\"><img alt=\"DragonBall Logo\" className=\"dragon-ball-logo\" src={dragonLogo} /></p>\n          <p className=\"sub-text\">\n            View your Dragon Ball GIF collection in the metaverse ✨\n          </p>\n          {!walletAddress && renderNotConnectedContainer()}\n          {walletAddress && renderConnectedContainer()}\n          <div className={walletAddress ? 'authed-container' : 'container'}></div>\n        </div>\n        <footer>\n          <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n            >{`built on @${TWITTER_HANDLE}`}</a>\n          </div>\n        </footer>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}